import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

import javax.swing.JFileChooser;

public class Main {

	public static void main(String[] args) {
		
		JFileChooser fileChooser = new JFileChooser();
		fileChooser.setCurrentDirectory ( new File ( System.getProperty("user.home") ) );
		int result = fileChooser.showOpenDialog ( fileChooser );
		
		//System.out.println ( result ) ;
		
		ArrayList<String> dictionary = new ArrayList<String>() ;
		
		for ( int i=0 ; i<=127 ; i++ )
			dictionary.add( Character.toString ( (char)i ) ) ;
		
		String data = "" ;
		
		if ( result == JFileChooser.APPROVE_OPTION ) {
	
		    File selectedFile = fileChooser.getSelectedFile();
		    File destFile = new File ( "Destination.txt" ) ;
		   
				try {
					
					FileReader fr = new FileReader( selectedFile );
					BufferedReader br = new BufferedReader(fr);
					String line;
					
					while ( (line = br.readLine()) != null ) 
						data += line ;
					
					FileWriter fw = new FileWriter( destFile );
					BufferedWriter bw = new BufferedWriter(fw);
					bw.write( compress ( dictionary , data ) );
					bw.close();
					
					dictionary = new ArrayList<String>() ;
					
					for ( int i=0 ; i<=127 ; i++ )
						dictionary.add( Character.toString ( (char)i ) ) ;
					
					fw = new FileWriter( selectedFile );
					bw = new BufferedWriter( fw ) ;
					bw.write( deCompress ( dictionary , compress ( dictionary , data ) ) );
					bw.close();
					
				} catch (FileNotFoundException e) {
					
					e.printStackTrace();
				} catch (IOException e) {
					
					e.printStackTrace();
				}
		
		}

	}
	
	public static int search( ArrayList<String> dictionary, String data,
			int current, int length ) {

		if ( current + length > data.length() )
			return -2;

		String sub = data.substring( current, current + length ) ;

		return dictionary.indexOf( sub ) ;
	}

	public static String compress( ArrayList<String> dictionary, String data ) {

		String res = "" ;

		int i = 0, length, pointer ;

		while (i < data.length()) {

			length = 1;

			while (true) {

				pointer = search( dictionary, data, i, length );

				if (pointer == -1) {

					pointer = search( dictionary, data, i, --length ) ;
					res += Integer.toString( pointer ) + "|" ;

					dictionary.add( data.substring( i, i + length + 1) ) ;

					break;
				} 
				else if (pointer == -2) {

					pointer = search(dictionary, data, i, length - 1) ;
					res += Integer.toString( pointer ) + "|" ;

					break ;
				}

				//length ++ ;
			}

			i += length ;
		}

		return res ;
	}

	public static String deCompress(ArrayList<String> dictionary, String cData) {

		String res = "", lastWord = "";

		int i = 0, j, pointer;

		while ( i < cData.length() ){

			j = i ;

			while ( cData.charAt(j) != '|' )
				j++ ;

			pointer = Integer.parseInt( cData.substring(i, j) );

			if ( pointer >= dictionary.size() ) {

				lastWord += lastWord.charAt(0) ;
				dictionary.add( lastWord ) ;

				res += lastWord ;
			} 
			else {

				if ( !lastWord.equals("") )
					dictionary.add( lastWord + dictionary.get(pointer).charAt(0) );

				lastWord = dictionary.get(pointer);
				res += lastWord;
			}

			i += j - i + 1;

		} // end while

		return res;
	}
}


